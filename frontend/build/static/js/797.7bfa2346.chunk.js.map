{"version":3,"file":"static/js/797.7bfa2346.chunk.js","mappings":"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","sources":["api/api.js","components/Login/Login.jsx","helper/FormValid.js"],"sourcesContent":["import axios from 'axios'\r\nimport { errorToast, successToast } from '../helper/FormValid';\r\nimport store from '../redux/store/store'\r\nimport {showLoader, hideLoader} from '../redux/state/settingSlice'\r\nimport {setToken, setUserDetails} from '../helper/Session'\r\nconst baseURL = 'https://task-manager-app-production.up.railway.app/api/v1';\r\n\r\nconst registrationRequest =(email, firstName, lastName, mobileNumber, password, photo)=>{\r\n    store.dispatch(showLoader())\r\n    let URL = baseURL +\"/registration\";\r\n    let postBody = {\r\n        email: email,\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        mobileNumber: mobileNumber,\r\n        password: password,\r\n        photo: photo\r\n    }\r\n    return axios.post(URL, postBody).then((res)=>{\r\n        store.dispatch(hideLoader())\r\n        if(res.status === 200){\r\n            if(res.data['status'] === \"failed\"){\r\n                if(res.data['data']['keyPattern']['email']===1){\r\n                    errorToast(\"Email Already Exist\")\r\n                    return false;\r\n                }\r\n                else{\r\n                    errorToast(\"Something Went Wrong\")\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                successToast(\"Registration Success\")\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            errorToast(\"Something Went Wrong\")\r\n            return  false;\r\n        }\r\n    }).catch((err)=>{\r\n        store.dispatch(hideLoader())\r\n        errorToast(\"Something Went Wrong\")\r\n        return false;\r\n    })\r\n}\r\nexport const loginRequest = (email, password)=>{\r\n    store.dispatch(showLoader())\r\n    let URL = baseURL +\"/login\";\r\n    let postBody = {\"email\": email,\"passoword\": password}\r\n    return axios.post(URL, postBody).then((res)=>{\r\n        store.dispatch(hideLoader());\r\n        if(res.status===200){\r\n            setToken(res.data['token']);\r\n            setUserDetails(res.data['data']);\r\n            successToast(\"Login Success\")\r\n            return true;\r\n        }\r\n        else{\r\n            errorToast(\"Invalid Email or Password\")\r\n            return  false;\r\n        }\r\n\r\n    }).catch((err)=>{\r\n        console.log(err)\r\n        errorToast(\"Something Went Wrong\")\r\n        store.dispatch(hideLoader())\r\n        return false;\r\n    })\r\n}\r\nexport default registrationRequest;","import React, {Fragment, useRef} from 'react';\nimport {Link} from \"react-router-dom\";\nimport { errorToast, isEmail, isEmpty } from '../../helper/FormValid';\nimport {loginRequest} from '../../api/api'\n\nconst Login = () => {\n\n    let emailRef, passRef = useRef();\n\n    const submitLogin = ()=>{\n        let email = emailRef.value;\n        let password = passRef.value;\n        \n        if(isEmail(email)){\n            errorToast(\"Invalid Email Address\")\n        }\n        else if(isEmpty(password)){\n            errorToast(\"Password Required\")\n        }\n        else{\n            loginRequest(email, password).then((result)=>{\n                if(result === true){\n                    window.location.href=\"/\"\n                }\n            })\n        }\n    }\n    return (\n        <Fragment>\n            <div className=\"container\">\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-md-7 col-lg-7 center-screen\">\n                        <div className=\"card w-90  p-4\">\n                            <div className=\"card-body\">\n                                <h4 className='text-center'>Sign In</h4>\n                                <br/>\n                                <input ref={(input)=>emailRef=input} placeholder=\"User Email\" className=\"form-control animated fadeInUp\" type=\"email\"/>\n                                <br/>\n                                <input ref={(input)=>passRef=input} placeholder=\"User Password\" className=\"form-control animated fadeInUp\" type=\"password\"/>\n                                <br/>\n                                <button onClick={submitLogin} className=\"btn w-100 animated fadeInUp float-end btn-primary\">Next</button>\n                                <hr/>\n                                <div className=\"text-center w-100\">\n                                        <Link className=\"text-center  ms-3 h6 animated fadeInUp\" to=\"/Registration\">Sign Up </Link>\n                                            <br/>    \n                                        <Link className=\"text-center ms-3 h6 animated fadeInUp\" to=\"/ForgetPass\">Forget Password</Link>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    );\n};\nexport default Login;","import cogoToast from \"cogo-toast\";\r\nlet EmailRegx = /\\S+@\\S+\\.\\S+/;\r\nlet MobileRegx = /(^(\\+88|0088)?(01){1}[3456789]{1}(\\d){8})$/;\r\n\r\nconst FormValidation ={\r\n    isEmpty (value){\r\n        return value.length === 0;\r\n    },\r\n    isMobile (value){\r\n        return MobileRegx.test(value);\r\n    },\r\n    isEmail(value){\r\n        return !EmailRegx.test(value);\r\n    },\r\n    errorToast(msg){\r\n        cogoToast.error(msg, {position: \"bottom-center\"})\r\n    },\r\n    successToast(msg){\r\n        cogoToast.success(msg, {position: \"bottom-center\"})\r\n    }\r\n\r\n}\r\nexport const {\r\n    isEmpty,\r\n    isMobile,\r\n    isEmail,\r\n    errorToast,\r\n    successToast\r\n} = FormValidation;"],"names":["baseURL","loginRequest","email","password","store","showLoader","URL","postBody","axios","then","res","hideLoader","status","setToken","data","setUserDetails","successToast","errorToast","catch","err","console","log","firstName","lastName","mobileNumber","photo","emailRef","passRef","useRef","Fragment","className","ref","input","placeholder","type","onClick","value","isEmail","isEmpty","result","window","location","href","to","EmailRegx","MobileRegx","length","isMobile","test","msg","cogoToast","position"],"sourceRoot":""}