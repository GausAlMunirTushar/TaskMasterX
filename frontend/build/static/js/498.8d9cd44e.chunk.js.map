{"version":3,"file":"static/js/498.8d9cd44e.chunk.js","mappings":"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","sources":["api/api.js","components/Registration/Registration.jsx","helper/FormValid.js"],"sourcesContent":["import axios from 'axios'\r\nimport { errorToast, successToast } from '../helper/FormValid';\r\nimport store from '../redux/store/store'\r\nimport {showLoader, hideLoader} from '../redux/state/settingSlice'\r\nimport {setToken, setUserDetails} from '../helper/Session'\r\nconst baseURL = 'https://task-manager-app-production.up.railway.app/api/v1';\r\n\r\nconst registrationRequest =(email, firstName, lastName, mobileNumber, password, photo)=>{\r\n    store.dispatch(showLoader())\r\n    let URL = baseURL +\"/registration\";\r\n    let postBody = {\r\n        email: email,\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        mobileNumber: mobileNumber,\r\n        password: password,\r\n        photo: photo\r\n    }\r\n    return axios.post(URL, postBody).then((res)=>{\r\n        store.dispatch(hideLoader())\r\n        if(res.status === 200){\r\n            if(res.data['status'] === \"failed\"){\r\n                if(res.data['data']['keyPattern']['email']===1){\r\n                    errorToast(\"Email Already Exist\")\r\n                    return false;\r\n                }\r\n                else{\r\n                    errorToast(\"Something Went Wrong\")\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                successToast(\"Registration Success\")\r\n                return true;\r\n            }\r\n        }\r\n        else{\r\n            errorToast(\"Something Went Wrong\")\r\n            return  false;\r\n        }\r\n    }).catch((err)=>{\r\n        store.dispatch(hideLoader())\r\n        errorToast(\"Something Went Wrong\")\r\n        return false;\r\n    })\r\n}\r\nexport const loginRequest = (email, password)=>{\r\n    store.dispatch(showLoader())\r\n    let URL = baseURL +\"/login\";\r\n    let postBody = {\"email\": email,\"passoword\": password}\r\n    return axios.post(URL, postBody).then((res)=>{\r\n        store.dispatch(hideLoader());\r\n        if(res.status===200){\r\n            setToken(res.data['token']);\r\n            setUserDetails(res.data['data']);\r\n            successToast(\"Login Success\")\r\n            return true;\r\n        }\r\n        else{\r\n            errorToast(\"Invalid Email or Password\")\r\n            return  false;\r\n        }\r\n\r\n    }).catch((err)=>{\r\n        console.log(err)\r\n        errorToast(\"Something Went Wrong\")\r\n        store.dispatch(hideLoader())\r\n        return false;\r\n    })\r\n}\r\nexport default registrationRequest;","import React, { useRef} from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { isEmail, isEmpty, isMobile, errorToast } from '../../helper/FormValid';\nimport registrationRequest from '../../api/api'\n\nconst Registration = () => {\n\n    let emailRef, firstNameRef, lastNameRef, mobileNumberRef, passwordRef = useRef();\n    let navigate = useNavigate();\n\n    const onRegistration = ()=>{\n        let email = emailRef.value;\n        let firstName = firstNameRef.value;\n        let lastName = lastNameRef.value;\n        let mobileNumber = mobileNumberRef.value;\n        let password = passwordRef.value;\n        \n        if(isEmail(email)){\n            errorToast(\"Valid Email Address Required\")\n        }\n        else if(isEmpty(firstName)){\n            errorToast(\"First Name Required\")\n        }\n        else if(isEmpty(lastName)){\n            errorToast(\"Last Name Required\")\n        }\n        else if(!isMobile(mobileNumber)){\n            errorToast(\"Valid Mobile Number Required\")\n        }\n        else if(isEmpty(password)){\n            errorToast(\"Password Required\")\n        }\n        else{\n            registrationRequest(email, firstName, lastName, mobileNumber, password, \" \").then((result)=>{\n                if(result === true){\n                    navigate('/login')\n                }\n            })\n        }\n\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row  justify-content-center\">\n                <div className=\"col-md-10 col-lg-6 center-screen\">\n                    <div className=\"card animated fadeIn w-100 p-4 mt-4\">\n                        <div className=\"card-body\">\n                            <h4 className='text-center'>Sign Up</h4>\n                            <div className=\"container-fluid m-0 p-0\">\n                                <div className=\"row m-0 p-0\">\n                                    <div className=\"col-md-12 p-2\">\n                                        <input ref={(input)=>emailRef=input} placeholder=\"User Email\" className=\"form-control animated fadeInUp\" type=\"email\"/>\n                                    </div>\n                                    <div className=\"col-md-12 p-2\">\n                                        <input ref={(input)=>firstNameRef=input} placeholder=\"First Name\" className=\"form-control animated fadeInUp\" type=\"text\"/>\n                                    </div>\n                                    <div className=\"col-md-12 p-2\">\n                                        <input ref={(input)=>lastNameRef=input} placeholder=\"Last Name\" className=\"form-control animated fadeInUp\" type=\"text\"/>\n                                    </div>\n                                    <div className=\"col-md-12 p-2\"> \n                                        <input ref={(input)=>mobileNumberRef=input} placeholder=\"Mobile\" className=\"form-control animated fadeInUp\" type=\"mobile\"/>\n                                    </div>\n                                    <div className=\"col-md-12 p-2\">\n                                        <input ref={(input)=>passwordRef=input} placeholder=\"User Password\" className=\"form-control animated fadeInUp\" type=\"password\"/>\n                                    </div>\n\n                                </div>\n                                <div lassName=\"row mt-2 p-0\">\n                                    <div className=\"col-md-12 p-2\">\n                                        <button onClick={onRegistration} className=\"btn mt-3 w-100 float-end btn-primary animated fadeInUp\">Complete</button>\n                                    </div>\n                                </div>\n                                <div className=\"text-center w-100\">\n                                        <Link className=\"text-center  ms-3 h6 animated fadeInUp\" to=\"/Login\">Sign In </Link>\n                                            <br/>    \n                                        <Link className=\"text-center ms-3 h6 animated fadeInUp\" to=\"/ForgetPass\">Forget Password</Link>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default Registration;","import cogoToast from \"cogo-toast\";\r\nlet EmailRegx = /\\S+@\\S+\\.\\S+/;\r\nlet MobileRegx = /(^(\\+88|0088)?(01){1}[3456789]{1}(\\d){8})$/;\r\n\r\nconst FormValidation ={\r\n    isEmpty (value){\r\n        return value.length === 0;\r\n    },\r\n    isMobile (value){\r\n        return MobileRegx.test(value);\r\n    },\r\n    isEmail(value){\r\n        return !EmailRegx.test(value);\r\n    },\r\n    errorToast(msg){\r\n        cogoToast.error(msg, {position: \"bottom-center\"})\r\n    },\r\n    successToast(msg){\r\n        cogoToast.success(msg, {position: \"bottom-center\"})\r\n    }\r\n\r\n}\r\nexport const {\r\n    isEmpty,\r\n    isMobile,\r\n    isEmail,\r\n    errorToast,\r\n    successToast\r\n} = FormValidation;"],"names":["baseURL","loginRequest","email","password","store","showLoader","URL","postBody","axios","then","res","hideLoader","status","setToken","data","setUserDetails","successToast","errorToast","catch","err","console","log","firstName","lastName","mobileNumber","photo","emailRef","firstNameRef","lastNameRef","mobileNumberRef","passwordRef","useRef","navigate","useNavigate","className","ref","input","placeholder","type","lassName","onClick","value","isEmail","isEmpty","isMobile","registrationRequest","result","to","EmailRegx","MobileRegx","length","test","msg","cogoToast","position"],"sourceRoot":""}